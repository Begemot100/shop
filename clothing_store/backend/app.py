from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager, UserMixin, login_user, login_required, current_user, logout_user
from flask_cors import CORS
from flask_bcrypt import Bcrypt
import os

app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = 'postgres://username:password@nozomi.proxy.rlwy.net:47023/Postgres-OQP9'
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
app.config['SECRET_KEY'] = 'your_secret_key'

db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "login"

CORS(app)
# db = SQLAlchemy(app)
# db.init_app(app)
migrate = Migrate(app, db)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ db
import models
from models import User, Product, db

db.init_app(app)
with app.app_context():
    db.create_all()
# migrate = Migrate(app, db)  # üî• –ü–æ–¥–∫–ª—é—á–∞–µ–º Flask-Migrate



# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@app.route("/api/register", methods=["POST"])
def register():
    data = request.get_json()
    print("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)  # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –ª–∏ –¥–∞–Ω–Ω—ã–µ

    if not data or not data.get("name") or not data.get("email") or not data.get("password"):
        print("‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        return jsonify({"error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}), 400

    existing_user = User.query.filter_by(email=data["email"]).first()
    if existing_user:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        return jsonify({"error": "Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}), 400

    hashed_password = bcrypt.generate_password_hash(data["password"]).decode("utf-8")
    new_user = User(name=data["name"], email=data["email"], password=hashed_password)

    print("üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", new_user.name, new_user.email)

    with app.app_context():  # ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        db.session.add(new_user)
        db.session.commit()

    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î!")  # üî• –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö

    return jsonify({"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"}), 201

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ª–æ–≥–∏–Ω–∞
@app.route("/login", methods=["POST"])
def login():
    data = request.get_json()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    email = data.get("email")
    password = data.get("password")

    user = User.query.filter_by(email=email).first()

    if user and bcrypt.check_password_hash(user.password, password):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        login_user(user)  # –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
        if user.is_admin():
            return jsonify({"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!", "redirect": "/admin"}), 200
        else:
            return jsonify({"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", "redirect": "/dashboard"}), 200
    else:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"}), 401

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ª–æ–≥–∞—É—Ç–∞
@app.route("/logout")
@login_required
def logout():
    logout_user()  # –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    return jsonify({"message": "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"}), 200

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@app.route("/admin")
@login_required
def admin_panel():
    if not current_user.is_admin():
        return jsonify({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}), 403
    return jsonify({"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!"}), 200

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
@app.route("/api/products", methods=["GET"])
def get_products():
    products = Product.query.all()
    return jsonify([{"id": p.id, "name": p.name, "price": p.price, "image": p.image} for p in products])



# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
@app.route('/api/products/new', methods=['GET'])
def get_new_products():
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        new_products = Product.query.filter_by(is_new=True).all()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        products = []

        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        for product in new_products:
            products.append({
                'id': product.id,
                'name': product.name,
                'price': product.price,
                'image': product.image,
                'is_new': product.is_new
            })

        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not products:
            return jsonify({"message": "No new products found."}), 404

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        return jsonify(products)

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        return jsonify({"error": str(e)}), 500



# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Flask-Login
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

if __name__ == "__main__":
    with app.app_context():  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        db.create_all()  # –¢–µ–ø–µ—Ä—å create_all() –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    app.run(debug=True, port=5001)